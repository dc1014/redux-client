# PURE COMPONENTS

Using Redux and Immutable, everything can be written as Pure Components (also 'dump components'). Similar to pure functions, these have the following rules:

- A pure component receives all its data as props, like a function receives all its data as arguments. No side effects, including reading data from anywhere else, network requests, etc.

- Generally, has no internal state. What it renders is fully driven by its input props. Same component with same props should be same UI. No hidden state to make them different.

## SIMILARITY

Similar to pure function, we know what a component does by looking at its input and its rendered output.

The state resides in an immutable data structure inside the Store.

React components are a stateless projection of the state at a given point in time.

# IMMUTABLE DATA AND PURE RENDERING

If immutable data is used in component props, and the component is pure, then React can use a more efficient strategy for detecting changes in the props.

This is done by applying the PureRenderMixin that is available as an ADD-ON PACKAGE. When this mixin is added to a component, it changes the way React checks for changes in the component's props (and state). IT DOES A SHALLOW COMPARE INSTEAD OF A DEEP COMPARE

Since data never changes within immutable data structures, if the props point to the same values between renders, then component does not need to be re-rendered.

# ROUTING AND MORE UI TESTS

npm install history@1.17.0 react-router@latest

Hey, components which are full page should get their own route. There exists a React router.

If we want to use single routes to single/multiple components, a root Route must be created which points to the APP component

The APP route should be responsible for rendering its child components, as passed in via the this.props.children.

App should not have pure mixins since it would not cause routes to fire because of some dumb internal issue

src/index.jsx should be provided the Router component as the root component of the app. Route table is plugged in as a child component

# CLIENT SIDE REDUX STORE

We begin by thinking of the state of teh application.

we have a UI with two screens. On both of them, we display the pair of entries being voted on. It would make sense to have a state which included a vote entry with such a pair...

In addition, the results screen displays the current tally of votes. That should also be in the vote state

The Voting component renders differently when the user has already voted in the current pair. This is something else that state needs to track...

When there is a winner, we THAT AND ONLY THAT in the state...

Everything is a subset of the server state, except for the hasVoted entry.

This brings us to the implementation of the core logic and the actions and reducers that our Redux Store will use. What should they be?

We can think in terms of what actions that we expect will change the state (makes sense).

User actions should change this state, and currently two possible actions are built into the AI:

- The user clicks one of the vote buttons on the voting screen.

- The user clicks on the Next button on the results screen

Our server is set up to send the current state and this will need to be implemented. A 3rd source of state change.

Begin with the server start update, since its most straight forward. Ideally, client reducer should take snapshot from server and merge it into client state, i.e.

{
    type: 'SET_STATE',
    state: {
        vote: {...}
    }
}

And so our reducer will take actions which will provide the default state (server state), or the merged nextState

# GETTING DATA IN FROM REDUX TO REACT

Immutable REDUX STORE that holds our immutable app state. Stateless React components that take immutible inputs.

Pure render would only rerender those components which have a change in state.

React-redux has bindings for this. We can handle by:

1. Mapping the Store state into component input props
2. Mapping actions into component output callback props

But top-level must first be wrapped inside a react-redux PROVIDER component. Connects component tree to Redux store, enabling mappings for individual components. Will be ancestor of all app components, placed around the Router.

Then, the components need to be wired up to the data. In this case, Vote and Winner are only used by parent components for their props, so they don't need wiring. Only Voting and Results. Placeholder values at App level need to be replaced by store.

CONNECT function from react-redux takes a mapping function as an arg and returns another func that takes a React component class;

# SETTING UP SOCKET.IO CLIENT

Need to install and establish a connection to server.

This requires a socket.io connection and on the right event (such as state event), use the store's dispatcher to dispatch the event with its payload.

## Dispatching actions from components ...

What happens when user clicks on something? Vote should be sent to server, and the hasVoted prop should be set on the component to prevent future voting.

Sounds like a good action. This will be the VOTE action, which will populate the HASVOTED entry in the state Map

Keep components pure and unaware of actions or Redux. Instead use connect. Also react-redux can wire up OUTPUT actions with the Redux concept of an ACTION CREATER.

Fair better to factory functions with the name of the action instead of inlining that into the switch case. In other words, pure functions that said return action objects. They encapsulate internal structure of action objects so rest of code does not need to be concerned.

They also document.

# SEND ACTIONS TO THE SERVER USING REDUX MIDDLEWARE

We need to send actions to the server when the user clicks the Vote button, or the admin clicks the Next button.

Consider voting:

A VOTE action should be created and dispatched to the client-side Redux store when a user votes.

VOTE actions are handled by the client-side reducer by setting the hasVoted state. The server is ready to receive actions from clients via the action Socket.io event.

VOTE actions are handled by the serverside reducer by registering the vote and updating the tally


